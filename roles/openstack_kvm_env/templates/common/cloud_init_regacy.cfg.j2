#cloud-config
hostname: {{ instance.name }}
fqdn: {{ instance.name }}.example.com
manage_etc_hosts: true
users:
  - name: sushi7
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    home: /home/sushi7
    shell: /bin/bash
    # TODO: For debugging purpose only, you can set the user's password as 'p@ssw0rd' by declaring `passwd` like below.
    #       You can also create new passwd manually by typing like below.
    #         openssl passwd -6 -salt xyz  yourpass
    #       See also: https://unix.stackexchange.com/questions/81240/manually-generate-password-for-etc-shadow
    #passwd: $6$xyz$rfUoxhnScmjOykLAVIhgfxmKgIWmTirRSrIZ9j5EJ1Vf765rQS.dCbXjXBx4PuhbcNNrXx2XpwUywQ96C7EJB/
    #lock_passwd: false
    ssh-authorized-keys:
      - {{ instance.ssh_public_key }}
# only cert auth via ssh (console access can still login)
ssh_pwauth: false
disable_root: false
chpasswd:
  list: |
    ubuntu:linux
  expire: False

package_update: true
packages:
  - qemu-guest-agent
# written to /var/log/cloud-init-output.log
final_message: "The system is finally up, after $UPTIME seconds"
# Create swap file only in dev environment
# https://cloudinit.readthedocs.io/en/latest/topics/examples.html
{% if 'swap' in group_vars.kvm.instances[instance.name] and 'size' in group_vars.kvm.instances[instance.name].swap -%}
swap:
  filename: /swap.img
  size: "auto"
  maxsize: {{ group_vars.kvm.instances[instance.name].swap.size }}
{%- endif %}

# {{ instance.name }}

{% if instance.name | regex_search('^.*cinder.*$') %}
write_files:
  - path: /opt/create_cinder_volume.sh
    content: |
      #!/usr/bin/env bash
      # A script starts from here >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      # NOTE: This is a script to create a cinder LVM volume
      log_err() { echo "$(date) - $1" | tee -a /var/log/cloud_init_script.log; }
      log_info() { echo "$(date) - $1" | tee -a /var/log/cloud_init_script.log; }
      main() {
        local device_path="$1"

        [ ! -b "${device_path}" ] && {
          log_err "A device \"${device_path}\" was not found" >&2
          return 2
        }
        log_info "Create a physical volume at \"${device_path}\""
        pvcreate "${device_path}"
        log_info "Create a volume group at \"${device_path}\" named \"cinder-volumes\""
        vgcreate cinder-volumes "${device_path}"

        log_info "A result of pvdisplay"
        log_info "$(pvcreate)"
        log_info "A result of vgdisplay"
        log_info "$(vgdisplay)"
      }
      main "$@"
      # A script ends to here >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    permissions: '0755'

runcmd: 
  # It supports only 1 disk for Cinder so far.
  # And it assumes that the node for cinder already has an empty device "/dev/vdb".
  - /opt/create_cinder_volume.sh /dev/vdb
{% endif %}

