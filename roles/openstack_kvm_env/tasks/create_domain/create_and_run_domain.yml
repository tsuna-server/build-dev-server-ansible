---
- name: Create UUID for new domain
  set_fact:
    domain_uuid: "{{ 1000 | random | to_uuid }}"

- name: Declare resource directory
  set_fact:
    portion_resource_directory: "common"
    version_number_of_ubuntu: "{{ group_vars.cloud_image.os_variant | regex_search(version_number_regex, '\\1') | first }}"
  vars:
    version_number_regex: '^.*[Uu]buntu[^0-9]*([0-9]+\.[0-9]+)[^0-9]*$'

- name: End if failed to get version-number of Ubuntu
  ansible.builtin.fail:
    msg: "Failed to execute next instructions due to failed to get a variable \"version_number_of_ubuntu\". It is empty."
  when: 'version_number_of_ubuntu | length <= 0'

- name: Print variables declared .
  ansible.builtin.debug:
    msg: "portion_resource_directory = {{ portion_resource_directory }}, version_number_of_ubuntu={{ version_number_of_ubuntu }}"


- name: Create a directory for a new domain
  ansible.builtin.file:
    path: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}"
    state: directory
    mode: '0755'

# Same cloud_init.cfg.j2 is used between all nodes
- name: Create cloud_init.cfg
  ansible.builtin.template:
    src: "common/cloud_init.cfg.j2"
    dest: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}/cloud_init.cfg"
    owner: root
    group: root
    mode: '644'
    backup: no

- name: Create network config
  ansible.builtin.template:
    src: "{{ portion_resource_directory }}/network_config.cfg.j2"
    dest: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}/network_config.cfg"

- name: Create seed image to insert cloud and network configs
  ansible.builtin.command:
    argv: ["cloud-localds", "-v", "--network-config", "network_config.cfg", "{{ instance.name }}-seed.img", "cloud_init.cfg"]
  args:
    chdir: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}"

- name: Create an external snapshot from base image
  ansible.builtin.command:
    argv: ["qemu-img", "create", "-F", "qcow2", "-b", "../{{ base_image_name }}", "-f", "qcow2", "{{ instance.name }}.img"]
  args:
    chdir: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}"

- name: Include create_additional_disk/main.yml
  include_tasks: create_additional_disk/main.yml
  when: "'additional_disks' in instance"
  loop_control:
    loop_var: disk
    extended: yes
    #index_var: disk_index
  loop: '{{ instance.additional_disks }}'

## Create a new domain with `virt-install` command
## TODO: This is for creating domain XML file. It assumes run `virsh dumpxml <domain>`, edit it and save it as a new file after startup. Then we can use the XML file to define a domain.
#- name: virt-install a domain
#  ansible.builtin.command:
#    argv: ["/usr/bin/virt-install",
#               "--name", "{{ instance.name }}",
#               "--virt-type", "kvm",
#               "--memory", "{{ instance.memory }}",
#               "--vcpus", "2",
#               "--boot", "hd,menu=on",
#               "--disk", "path={{ instance.name }}-seed.img,device=cdrom",
#               "--disk", "path={{ instance.name }}.img,device=disk",
#               "--graphics", "vnc",
#               "--os-type", "Linux",
#               "--os-variant", "{{ group_vars.cloud_image.os_variant }}",
#               "--network", "bridge:{{ instance.name_of_host_bridge }}",
#               "--console", "pty,target_type=serial",
#               "--noautoconsole"
#           ]
#  args:
#    chdir: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}"


# Define a domain follow each conditionals #############################################
#
# File system in a disk will be expanded by cloud-init automatically.
# You can expand disk size only in this instruction
- name: Expand a primary disk size
  ansible.builtin.command:
    argv: ["qemu-img", "resize", "{{ instance.name }}.img", "+{{ instance.disk.size }}"]
  args:
    chdir: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}"

- name: Create domain.xml for debug
  ansible.builtin.template:
    src: "{{ portion_resource_directory }}/domain_template.xml.j2"
    dest: "{{ group_vars.cloud_image.local_saved_dir }}/{{ instance.name }}/domain_template.xml"

- name: "Faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaail"
  ansible.builtin.fail:
    msg: "Faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaailed"

- name: "Define a new domain from an XML (instance={{ instance.name }})"
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', portion_resource_directory+'/domain_template.xml.j2') }}"

