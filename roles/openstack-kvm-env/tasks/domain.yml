---
# Declare variable in order to be convenience
- name: Declare instance variable for domain.yml
  set_fact:
    instance: "{{ item.value }}"

- name: Declare instance.name variable for domain.yml
  set_fact:
    instance: "{{ instance | combine( { 'name': item.key } ) }}"

- name: Declare provider_network_ip for the instance
  set_fact:
    provider_network_ip: "{%
                    if 'network' not in instance
                  -%}(undefined){%
                    elif 'provider' not in instance.network
                  -%}(undefined){%
                    elif 'ip' in instance.network.provider
                  -%}{{ instance.network.provider.ip }}{%
                    else
                  -%}(undefined){%
                    endif
                  -%}"

- name: Declare management_network_ip for the instance
  set_fact:
    management_network_ip: "{%
                    if 'network' not in instance
                  -%}(undefined){%
                    elif 'management' not in instance.network
                  -%}(undefined){%
                    elif 'ip' in instance.network.management
                  -%}{{ instance.network.management.ip }}{%
                    else
                  -%}(undefined){%
                    endif
                  -%}"

- name: Debug installing domain
  ansible.builtin.debug:
    msg: "Create and running domain[name={{ instance.name }}, provider.ip={{ provider_network_ip }}, management.ip={{ management_network_ip }}]"

# List defined domains
- name: Get defined domains
  community.libvirt.virt:
    command: list_vms
  register: defined_domains

# List running domains
- name: Get running domains
  community.libvirt.virt:
    command: list_vms
    state: running
  register: running_domains

- include: create_and_run_domain.yml
  when: "instance.name not in defined_domains.list_vms"

# Start domain if the domain was already defined but not running.
# Domain was already existed and running if create_and_run_domain.yml was executed previously.
- name: Domain should be running
  community.libvirt.virt:
    name: "{{ instance.name }}"
    state: running
  when: "instance.name not in running_domains.list_vms"

